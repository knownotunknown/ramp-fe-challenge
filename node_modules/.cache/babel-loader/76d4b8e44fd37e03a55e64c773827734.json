{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\somgu\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [memoTransactionsByEmployee, setMemoTransactionsByEmployee] = useState(false);\n  const [memoPaginatedTransactions, setMemoPaginatedTransactions] = useState(false);\n  const transactions = useMemo(() => {\n    if (paginatedTransactions && (!transactionsByEmployee || paginatedTransactions.data.length > transactionsByEmployee.length)) {\n      return paginatedTransactions.data;\n    }\n\n    return transactionsByEmployee !== null && transactionsByEmployee !== void 0 ? transactionsByEmployee : null;\n  }, [memoPaginatedTransactions, memoTransactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll().then(() => {\n      setMemoPaginatedTransactions(prev => {\n        return !prev;\n      });\n    });\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId).then(() => {\n      console.log(transactions);\n      setMemoTransactionsByEmployee(prev => {\n        return !prev;\n      });\n    });\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === '') {\n            //Case where All Employees is selected\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: console.log(paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage)\n        }, void 0, false), transactions !== null && paginatedTransactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6aYuqBVT4C9VRz5F/68mvRR+kEg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","memoTransactionsByEmployee","setMemoTransactionsByEmployee","memoPaginatedTransactions","setMemoPaginatedTransactions","transactions","length","loadAllTransactions","invalidateData","fetchAll","then","prev","loadTransactionsByEmployee","employeeId","fetchById","console","log","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["C:/Users/somgu/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState, useRef } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [memoTransactionsByEmployee, setMemoTransactionsByEmployee] = useState(false)\n  const [memoPaginatedTransactions, setMemoPaginatedTransactions] = useState(false)\n  \n  const transactions = useMemo(\n    () => {\n      if (paginatedTransactions && (!transactionsByEmployee || paginatedTransactions.data.length > transactionsByEmployee.length)) {\n        return paginatedTransactions.data;\n      }\n      return transactionsByEmployee ?? null\n    },\n    [memoPaginatedTransactions, memoTransactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    setIsLoading(false)\n    await paginatedTransactionsUtils.fetchAll()\n    .then(() => {setMemoPaginatedTransactions((prev) => {return !prev})});\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      .then(() => {console.log(transactions); \n        setMemoTransactionsByEmployee((prev) => {return !prev})});\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            if (newValue.id === '') { //Case where All Employees is selected\n              await loadAllTransactions();\n              return\n            }\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          <>{console.log(paginatedTransactions?.nextPage)}</>\n          {transactions !== null && paginatedTransactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}